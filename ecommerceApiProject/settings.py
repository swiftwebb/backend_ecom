"""
Django settings for ecommerceApiProject project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
# CSRF_TRUSTED_ORIGINS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apiApp',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerceApiProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerceApiProject.wsgi.application'

DB = os.getenv("DB")
if DB==False:
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("PD_NAME"),       
            "USER": os.getenv("PD_USER"), 
            "PASSWORD": os.getenv("PD_PASSWORD"), 
            "HOST": os.getenv("PD_HOST"),
            "PORT": os.getenv("PD_PORT"),

        }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = 'img/'

MEDIA_ROOT = BASE_DIR/'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "apiApp.CustomUser"



STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_KEY")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")

STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# pip install requests
# PAYSTACK_SECRET_KEY = "sk_test_xxxxxxxxxxxxxxxxxxxxxx"
# PAYSTACK_PUBLIC_KEY = "pk_test_xxxxxxxxxxxxxxxxxxxxxx"
# PAYSTACK_BASE_URL = "https://api.paystack.co"




# # apiApp/models.py
# from django.db import models
# from django.conf import settings

# class Payment(models.Model):
#     user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
#     email = models.EmailField()
#     amount = models.DecimalField(max_digits=10, decimal_places=2)  # in Naira
#     reference = models.CharField(max_length=100, unique=True)
#     status = models.CharField(max_length=20, default="pending")
#     created_at = models.DateTimeField(auto_now_add=True)

#     def __str__(self):
#         return f"{self.user.email} - {self.status}"






# python manage.py makemigrations
# python manage.py migrate



# # apiApp/views.py
# import requests
# from django.conf import settings
# from rest_framework.decorators import api_view
# from rest_framework.response import Response
# from .models import Payment
# import uuid

# @api_view(["POST"])
# def initialize_payment(request):
#     email = request.data.get("email")
#     amount = request.data.get("amount")  # in Naira

#     if not email or not amount:
#         return Response({"error": "Email and amount are required"}, status=400)

#     reference = str(uuid.uuid4())[:12]  # unique reference

#     headers = {
#         "Authorization": f"Bearer {settings.PAYSTACK_SECRET_KEY}",
#         "Content-Type": "application/json"
#     }

#     data = {
#         "email": email,
#         "amount": int(amount) * 100,  # Paystack works in Kobo
#         "reference": reference
#     }

#     url = f"{settings.PAYSTACK_BASE_URL}/transaction/initialize"
#     response = requests.post(url, headers=headers, json=data)
#     res_data = response.json()

#     if res_data.get("status") is True:
#         # Save payment in DB
#         Payment.objects.create(
#             user=request.user,
#             email=email,
#             amount=amount,
#             reference=reference
#         )
#         return Response(res_data)
#     else:
#         return Response(res_data, status=400)




# @api_view(["GET"])
# def verify_payment(request, reference):
#     headers = {
#         "Authorization": f"Bearer {settings.PAYSTACK_SECRET_KEY}"
#     }
#     url = f"{settings.PAYSTACK_BASE_URL}/transaction/verify/{reference}"

#     response = requests.get(url, headers=headers)
#     res_data = response.json()

#     if res_data.get("status") is True:
#         # Update DB
#         try:
#             payment = Payment.objects.get(reference=reference)
#             payment.status = res_data["data"]["status"]
#             payment.save()
#         except Payment.DoesNotExist:
#             pass
#         return Response(res_data)
#     else:
#         return Response(res_data, status=400)
